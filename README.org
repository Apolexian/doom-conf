#+title: Emacs config
#+author: Ivan Nikitin
#+PROPERTY: header-args :tangle config.el

* Font and Themes

#+BEGIN_SRC elisp
(setq doom-theme 'doom-dracula)
(setq doom-font (font-spec :family "Hack Nerd Font" :size 22 :weight 'medium))
#+END_SRC

* Line numbers

#+BEGIN_SRC elisp
(setq display-line-numbers-type 'relative)
#+END_SRC

* Org

#+BEGIN_SRC elisp
(setq org-directory "~/org/")
(advice-add #'org-mode-hook :after '+word-wrap-mode)
(defun org-insert-heading-with-timestamp (&rest r)
  (insert (format-time-string "~%H:%M:%S~ ")))
(defun org-insert-heading-with-timestamp-enable ()
  (interactive)
  (advice-add 'org-insert-item :after #'org-insert-heading-with-timestamp))
(defun org-insert-heading-with-timestamp-disable ()
  (interactive)
  (advice-remove 'org-insert-item 'org-insert-heading-with-timestamp))
(use-package! org-tempo
  :after org)
(after! org
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("elisp" . "src elisp")))
#+END_SRC

* Path handling

Export some default Golang paths

#+BEGIN_SRC elisp
(setenv "PATH" (concat "/usr/local/go/bin:" (getenv "PATH")))
(setenv "PATH" (concat "/home/ivan/go/bin:" (getenv "PATH")))
#+END_SRC

Make sure Emacs has the same paths as user shell.

#+BEGIN_SRC elisp
(require 'exec-path-from-shell)
(dolist (var '("SSH_AUTH_SOCK" "SSH_AGENT_PID" "GPG_AGENT_INFO" "LANG" "LC_CTYPE" "NIX_SSL_CERT_FILE" "NIX_PATH"))
  (add-to-list 'exec-path-from-shell-variables var))
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
#+END_SRC

* Start screen
Make starting screen bigger.
#+BEGIN_SRC elisp
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
(setq initial-frame-alist '((top . 1) (left . 1) (width . 170) (height . 45)))
#+END_SRC

Change starting splash pic.
#+BEGIN_SRC elisp
(setq fancy-splash-image (concat doom-user-dir "splash.png"))
#+END_SRC

* LSP

I use lsp-mode.

#+BEGIN_SRC elisp
(require 'lsp-mode)
#+END_SRC

Golang
#+BEGIN_SRC elisp
(add-hook 'go-mode-hook #'lsp-deferred)

;; Set up before-save hooks to format buffer and add/delete imports.
;; Make sure you don't have other gofmt/goimports hooks enabled.
(defun lsp-go-install-save-hooks ()
  (add-hook 'before-save-hook #'lsp-format-buffer t t)
  (add-hook 'before-save-hook #'lsp-organize-imports t t))
(add-hook 'go-mode-hook #'lsp-go-install-save-hooks)

(after! lsp-mode
  (setq  lsp-go-analyses '((fieldalignment . t)
                           (nilness . t)
                           (shadow . t)
                           (unusedparams . t)
                           (unusedwrite . t)
                           (useany . t)
                           (unusedvariable . t)))
  )
#+END_SRC

The lsp UI.
#+BEGIN_SRC elisp
(use-package lsp-ui
  :commands lsp-ui-mode
  :config
  (setq lsp-ui-doc-enable nil)
  (setq lsp-ui-doc-header t)
  (setq lsp-ui-doc-include-signature t)
  (setq lsp-ui-doc-border (face-foreground 'default))
  (setq lsp-ui-sideline-show-code-actions t)
  (setq lsp-ui-sideline-delay 0.05))
#+END_SRC

* Auto-completion

Copilot settings.
#+BEGIN_SRC elisp
;; accept completion from copilot and fallback to company
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (:map copilot-completion-map
              ("<tab>" . 'copilot-accept-completion)
              ("TAB" . 'copilot-accept-completion)
              ("C-TAB" . 'copilot-accept-completion-by-word)
              ("C-<tab>" . 'copilot-accept-completion-by-word)))
#+END_SRC

* Key-maps

** Clipboard

#+BEGIN_SRC elisp
(map! "S-C-c" #'clipboard-kill-ring-save)
(map! "S-C-v" #'clipboard-yank)
;; don't put deleted strings to X11 clipboard
(setq select-enable-clipboard nil)
#+END_SRC

** Tabs

#+BEGIN_SRC elisp
(map! :nvi "C-<tab>" 'centaur-tabs-forward)
(map! :nvi "C-<iso-lefttab>" 'centaur-tabs-backward)
#+END_SRC

* Undo tree

#+BEGIN_SRC elisp
(require 'undo-tree)
#+END_SRC

* Devdocs

#+BEGIN_SRC elisp
(global-set-key (kbd "C-h D") 'devdocs-lookup)
#+END_SRC

* Debugger

DAP

#+BEGIN_SRC elisp
;; Debugging
(drag-stuff-mode t)
(global-set-key (kbd "<C-S-up>") 'drag-stuff-up)
(global-set-key (kbd "<C-S-down>") 'drag-stuff-down)

(map! :map dap-mode-map
      :leader
      :prefix ("d" . "dap")
      ;; basics
      :desc "dap next"          "n" #'dap-next
      :desc "dap step in"       "i" #'dap-step-in
      :desc "dap step out"      "o" #'dap-step-out
      :desc "dap continue"      "c" #'dap-continue
      :desc "dap hydra"         "h" #'dap-hydra
      :desc "dap debug restart" "r" #'dap-debug-restart
      :desc "dap debug"         "s" #'dap-debug

      ;; debug
      :prefix ("dd" . "Debug")
      :desc "dap debug recent"  "r" #'dap-debug-recent
      :desc "dap debug last"    "l" #'dap-debug-last

      ;; eval
      :prefix ("de" . "Eval")
      :desc "eval"                "e" #'dap-eval
      :desc "eval region"         "r" #'dap-eval-region
      :desc "eval thing at point" "s" #'dap-eval-thing-at-point
      :desc "add expression"      "a" #'dap-ui-expressions-add
      :desc "remove expression"   "d" #'dap-ui-expressions-remove

      :prefix ("db" . "Breakpoint")
      :desc "dap breakpoint toggle"      "b" #'dap-breakpoint-toggle
      :desc "dap breakpoint condition"   "c" #'dap-breakpoint-condition
      :desc "dap breakpoint hit count"   "h" #'dap-breakpoint-hit-condition
      :desc "dap breakpoint log message" "l" #'dap-breakpoint-log-message)

;; Enabling only some features
(setq dap-auto-configure-features '(sessions locals controls tooltip))
#+END_SRC

* Random convinience

** Info colours

#+BEGIN_SRC elisp
(use-package! info-colors
  :commands (info-colors-fontify-node))

(add-hook 'Info-selection-hook 'info-colors-fontify-node)
#+END_SRC

** Thicker mode line

#+BEGIN_SRC elisp
(setq doom-modeline-height 45)
#+END_SRC

** Tabs

#+BEGIN_SRC elisp
(after! centaur-tabs
  (centaur-tabs-mode -1)
  (setq centaur-tabs-height 36
        centaur-tabs-set-icons t
        centaur-tabs-modified-marker "o"
        centaur-tabs-close-button "Ã—"
        centaur-tabs-set-bar 'above
        centaur-tabs-gray-out-icons 'buffer)
  (centaur-tabs-change-fonts "P22 Underground Book" 160))
#+END_SRC

** Treemacs

Ignore certain files

#+BEGIN_SRC elisp
(after! treemacS
  (defvar treemacs-file-ignore-extensions '()
    "File extension which `treemacs-ignore-filter' will ensure are ignored")
  (defvar treemacs-file-ignore-globs '()
    "Globs which will are transformed to `treemacs-file-ignore-regexps' which `treemacs-ignore-filter' will ensure are ignored")
  (defvar treemacs-file-ignore-regexps '()
    "RegExps to be tested to ignore files, generated from `treeemacs-file-ignore-globs'")
  (defun treemacs-file-ignore-generate-regexps ()
    "Generate `treemacs-file-ignore-regexps' from `treemacs-file-ignore-globs'"
    (setq treemacs-file-ignore-regexps (mapcar 'dired-glob-regexp treemacs-file-ignore-globs)))
  (if (equal treemacs-file-ignore-globs '()) nil (treemacs-file-ignore-generate-regexps))
  (defun treemacs-ignore-filter (file full-path)
    "Ignore files specified by `treemacs-file-ignore-extensions', and `treemacs-file-ignore-regexps'"
    (or (member (file-name-extension file) treemacs-file-ignore-extensions)
        (let ((ignore-file nil))
          (dolist (regexp treemacs-file-ignore-regexps ignore-file)
            (setq ignore-file (or ignore-file (if (string-match-p regexp full-path) t nil)))))))
  (add-to-list 'treemacs-ignored-file-predicates #'treemacs-ignore-filter))

                        (setq treemacs-file-ignore-extensions
      '(;; LaTeX
        "aux"
        "ptc"
        "fdb_latexmk"
        "fls"
        "synctex.gz"
        "toc"
        ;; LaTeX - glossary
        "glg"
        "glo"
        "gls"
        "glsdefs"
        "ist"
        "acn"
        "acr"
        "alg"
        ;; LaTeX - pgfplots
        "mw"
        ;; LaTeX - pdfx
        "pdfa.xmpi"
        ))
(setq treemacs-file-ignore-globs
      '(;; LaTeX
        "*/_minted-*"
        ;; AucTeX
        "*/.auctex-auto"
        "*/_region_.log"
        "*/_region_.tex"))
(use-package treemacs-projectile
  :after (treemacs projectile))

(after! (treemacs projectile)
  (treemacs-project-follow-mode 1))
(defun my/open-treemacs-in-project ()
  "Automatically open Treemacs in a project."
  (when (doom-project-root) ; Checks if the current buffer is in a Doom-recognized project
    (treemacs))) ; Opens Treemacs

(add-hook 'doom-first-file-hook 'my/open-treemacs-in-project)
#+END_SRC

** Evil

#+BEGIN_SRC elisp
(setq evil-shift-width 2)
#+END_SRC

* Python

#+begin_src elisp
(use-package! virtualenvwrapper)
(after! virtualenvwrapper
  (setq venv-location "~/.virtualenvs/")
)
(use-package! python-black
  :after python
  :hook (python-mode . python-black-on-save-mode-enable-dwim))
#+end_src
